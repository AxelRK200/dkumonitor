#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
export GRAPHITE_ROOT="$SCRIPT_DIR"
export PYTHONPATH=${GRAPHITE_ROOT}/lib/python2.7/site-packages:${PYTHONPATH}

# Get user arguments

print_help() {
  cat <<EOF
dkumonitor installer script. Usage:
installer -d|--directory DATA_DIR [-t|--type INSTALL_TYPE]

-d, --directory:
    The directory in which to install dkumonitor. Mandatory.

-p, --port:
    The install port range low bound. 50 ports must be reserved starting from this one. Mandatory.

-t, --type:
    The install type. Can be 'agent', 'server', 'backend', 'frontend', 'backend-agent' or 'all'. Default: 'server'.
      agent:          Only collectd will run to gather system metrics
      server:         Installs go-carbon, carbonapi and grafana, but does not collect data from this machine.
      backend:        Installs go-carbon and carbonapi, no grafana, no collectd
      backend-agent:  Like backend, but with collectd.
      all:            Installs all of it.

-u, --update:
    Update links to binaries but do not modify any configuration files.

-l, --carbon-listen:
    The listening IP for the carbon server metrics. Default: *

--carbonapi-listen:
    The listening IP for the carbonapi entrypoint. Default: *

--system-collectd:
    Use the collectd executable available on the system instead of the 
    one packaged with dku-monitor

--carbon-server:
    hostname of the carbon server when it is an agent or frontend install.

--hostname:
    Override the fqdn. Will splitted on "." and reversed to be used in collecd.

EOF
}

# Realpath fallback for oses without it (Mac)
command -v realpath >/dev/null 2>&1 || realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

data_dir=""
install_type="server"
install_port=""
carbon_server=""
carbon_port=""
system_collectd=False # Use python syntax
carbon_listening_ip="0.0.0.0"
carbonapi_listening_ip="0.0.0.0"
hostname="$(hostname -f)"
update=0
update_not_allowed_options=0 # Set to 1 if an option not allowed for update mode is encoutered
args=()
while [ $# -gt 0 ]
do
  case "$1" in
    -u|--update) 
      update=1
      ;;
    -d|--directory) 
      data_dir=$(realpath "$2")
      shift
      ;;
    -p|--port) 
      install_port="$2"
      update_not_allowed_options=1
      shift
      ;;
    -t|--type) 
      install_type=$2
      update_not_allowed_options=1
      shift
      ;;
    -l|--carbon-listen) 
      carbon_listening_ip=$2
      update_not_allowed_options=1
      shift
      ;;
    --carbonapi-listen) 
      carbonapi_listening_ip=$2
      update_not_allowed_options=1
      shift
      ;;
    --system-collectd)
      system_collectd=True # Use python syntax
      update_not_allowed_options=1
      ;;
    --carbon-server)
      carbon_server=$2
      update_not_allowed_options=1
      shift
      ;;
    --carbon-port)
      carbon_server=$2
      update_not_allowed_options=1
      shift
      ;;
    --hostname)
      hostname=$2
      update_not_allowed_options=1
      shift
      ;;
    -h|--help) 
      print_help
      exit 0
      ;;
     *) 
      args+=($1)
      ;;
  esac
  shift
done

if [ -z "$data_dir" ]; then
  print_help
  echo "-d|--directory option is mandatory"
  exit 1
fi

if [[ 0 < $update && 0 < $update_not_allowed_options ]]; then
  print_help
  echo "The -d/--directory only must be used in update mode."
  exit 1
fi

if [ 0 -eq $update ]; then
  if [ -z "$install_port" ]; then
    print_help
    echo "-p|--port option is mandatory"
    exit 1
  fi
fi

if [[ \
  "$install_type" != "all" \
  && "$install_type" != "server" \
  && "$install_type" != "agent" \
  && "$install_type" != "backend" \
  && "$install_type" != "frontend" \
  && "$install_type" != "backend-agent" \
  ]]; then
  print_help
  echo "-t|--type must be either 'agent', 'server', 'backend', 'frontend', 'backend-agent' or 'all'"
  exit 1
fi

# Utility functions
mkdir -p $data_dir/run

log() {
  current_time=$(date "+%Y-%m-%d %H:%M:%S")
  printf "[+] %s - %s\n" "$current_time" "$@" >> $data_dir/run/install.log
  printf "[+] %s - %s\n" "$current_time" "$@"
}

exec_logged() {
  echo "+" "$@" >> "$data_dir/run/install.log"
  "$@" 2>> "$data_dir/run/install.log" >> "$data_dir/run/install.log" # '&>>' syntax fails on MacOS
}

error_report() {
  cat "$data_dir/run/install.log"
  log "Execution failed, see log displayed above, stored in $data_dir/run/install.log"
  exit 1
}

trap 'error_report $LINENO' ERR

# Check requirements
log "Check requirements"
for cmd in python2.7; do
  if ! command -v "$cmd" > /dev/null; then
    log "$cmd is required."
    exit 1
  else
    log "$cmd found."
  fi
done

# Make the install
log "Create directory structure"
exec_logged mkdir -p "$data_dir/conf"
exec_logged mkdir -p "$data_dir/conf/collectd.d"
exec_logged mkdir -p "$data_dir/conf/grafana.d/provisioning/datasources"
exec_logged mkdir -p "$data_dir/conf/grafana.d/provisioning/dashboards"
exec_logged mkdir -p "$data_dir/storage"
exec_logged mkdir -p "$data_dir/bin"
exec_logged mkdir -p "$data_dir/dashboards"
# exec_logged cp "${GRAPHITE_ROOT}/dashboards/dss_system.json" "$data_dir/dashboards/"
# exec_logged cp "${GRAPHITE_ROOT}/dashboards/dss_backend.json" "$data_dir/dashboards/"
if [ ! -f "$data_dir/bin/env-site" ]; then
  touch "$data_dir/bin/env-site" 
fi

# Install the python environement

log "Precompile python code"
trap '' ERR
exec_logged python2.7 -m compileall -q "${SCRIPT_DIR}/lib/python" || true
trap 'error_report $LINENO' ERR


log "Create the virtualenv"
if [ ! -d "$data_dir/pyenv" ]; then
  mkdir -p "$data_dir/pyenv" 
  exec_logged python2.7 "${SCRIPT_DIR}/lib/python/virtualenv.py" -p python2.7 --no-download "$data_dir/pyenv"
  cat >"$data_dir/pyenv/lib/python2.7/sitecustomize.py" <<EOF
import site, pkg_resources
site.addsitedir('$SCRIPT_DIR/lib/python')
pkg_resources.fixup_namespace_packages('$INSTALLDIR/python.packages')
EOF
  source "$data_dir/pyenv/bin/activate" 
else
  source "$data_dir/pyenv/bin/activate" 
fi

# Install services configuration files

log "Copy non-templated configurations"
while read file; do
  exec_logged mkdir -p "$data_dir/conf/$file"
done < <(cd "${SCRIPT_DIR}/conf" && find . -type d)
while read file; do
  exec_logged cp -v "${SCRIPT_DIR}/conf/$file" "$data_dir/conf/$file"
done < <(cd "${SCRIPT_DIR}/conf" && find . -type f)

log "Render templated configurations"
exec_logged python <(cat <<EOF
from jinja2 import Template, Environment, FileSystemLoader
collectd_carbon_host = "$carbon_server"
grafana_carbon_host = "$carbon_server"
update_mode = True if "1" == "$update" else False # Do not use parenthesis here, it would make a tuple
data = {
  "hostname": "$hostname",
  "collectd_hostname": ".".join(reversed("$hostname".split("."))),
  "collectd_carbon_host": collectd_carbon_host if 0 < len(collectd_carbon_host) else "127.0.0.1",
  "grafana_carbon_host": grafana_carbon_host if 0 < len(grafana_carbon_host) else "127.0.0.1",
  "user": "$USER",
  "dkumonitor_root": "$SCRIPT_DIR", # Should only be used for env-default
  "dkumonitor_home": "$data_dir",
  "system_collectd": $system_collectd,
  "install_type": "$install_type",
  "carbon_listening_ip": "$carbon_listening_ip",
  "carbonapi_listening_ip": "$carbonapi_listening_ip",
  "carbon_udp_port": $((install_port+1)),
  "carbon_tcp_port": $((install_port+1)), # Can be the same than the UDP one
  "carbon_pickle_port": $((install_port+4)),
  "carbon_protobuf_port": $((install_port+5)),
  "carbon_http_port": $((install_port+6)),
  "carbon_link_port": $((install_port+7)),
  "carbon_grpc_port": $((install_port+8)),
  "carbon_tags_port": $((install_port+9)),
  "carbon_carbonserver_port": $((install_port+3)),
  "carbonapi_http_port": $((install_port+2)),
  "grafana_frontend_port": $((install_port)),
}
jinja_env = Environment(loader=FileSystemLoader("$SCRIPT_DIR/templates"))
jinja_env.get_template("env-default.j2").stream(data).dump("$data_dir/bin/env-default")
if not update_mode:
  for component in [
      "carbonapi.yml",
      "grafana.ini",
      "supervisord.conf",
      "collectd.conf",
      "collectd.d/write_graphite.conf",
      "collectd.d/df.conf",
      "grafana.d/provisioning/datasources/defaultsources.yml",
      "grafana.d/provisioning/dashboards/defaultdashboards.yml",
      "go-carbon.conf",
      "telegraf.conf"
    ]:
    jinja_env.get_template("{}.j2".format(component)).stream(data).dump("$data_dir/conf/{}".format(component))

EOF
)

log "Link static assets"
if [ -e "${data_dir}/static" ]; then
  exec_logged rm "${data_dir}/static"
fi
exec_logged ln -s "${SCRIPT_DIR}/static" "${data_dir}/"
if [ -e "${data_dir}/lib" ]; then
  exec_logged rm "${data_dir}/lib"
fi
exec_logged ln -s "${SCRIPT_DIR}/lib" "${data_dir}/"

log "Link starter"
if [ -e "${data_dir}/bin/dkumonitor" ]; then
  exec_logged rm "${data_dir}/bin/dkumonitor"
fi
if [ -e "${data_dir}/bin/dkm" ]; then
  exec_logged rm "${data_dir}/bin/dkm"
fi
if [ -e "${data_dir}/bin/dkmadmin" ]; then
  exec_logged rm "${data_dir}/bin/dkmadmin"
fi
exec_logged ln -s "${SCRIPT_DIR}/bin/dkm" "${data_dir}/bin/dkm"
exec_logged ln -s "${SCRIPT_DIR}/bin/dkm" "${data_dir}/bin/dkumonitor"
exec_logged ln -s "${SCRIPT_DIR}/bin/dkmadmin" "${data_dir}/bin/dkmadmin"

trap - ERR
log "Done"
