#!/bin/bash

# Handling errors
set -e
set -o pipefail

# Setup logging
#set -x
exec > >(while read log_line; do printf "[%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$log_line"; done)
exec 2>&1

# Config
INFLUXDB_REPO="github.com/influxdata/influxdb"
INFLUXDB_VERSION="v2.0.0-alpha.18"
INFLUXDB_BINARY_REPO_URI="dl.influxdata.com/influxdb/releases"
INFLUXDB_BINARY_FILE_darwin="influxdb_2.0.0-alpha.18_darwin_amd64.tar.gz"
INFLUXDB_BINARY_FILE_linux="influxdb_2.0.0-alpha.18_linux_amd64.tar.gz"
GRAFANA_REPO="github.com/grafana/grafana"
GRAFANA_VERSION="v5.2.2"
TELEGRAF_REPO="github.com/influxdata/telegraf"
TELEGRAF_VERSION="1.12.2"

DKUMONITOR_VERSION="0.1.0-alpha"

# Local definitions
get_os_specific_var() {
  var_name="${1}_${2}"
  echo ${!var_name}
}

SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
BUILD_DIR="${SCRIPT_DIR}/build"
DIST_DIR="${SCRIPT_DIR}/dist/dkumonitor-$DKUMONITOR_VERSION"

# Realpath fallback for oses without it (Mac)
command -v realpath >/dev/null 2>&1 || realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# Detect ostype
os_type=$(uname | tr '[:upper:]' '[:lower:]')
case $os_type in
	linux|darwin)
		;;
	*)
		echo "OS Type $os_type is not supported."	
    exit 1
 		;;
esac

# Resolves platform specifics
INFLUXDB_BINARY_FILE=$(get_os_specific_var INFLUXDB_BINARY_FILE ${os_type})
echo $INFLUXDB_BINARY_FILE



do_build=1
do_archive=1
verbose=0
while [ $# -gt 0 ]
do
  case "$1" in
    --skip-build) 
      do_build=0
      ;;
    --skip-archive) 
      do_archive=0
      ;;
    --build-dir) 
      BUILD_DIR=$(realpath $2)
      shift
      ;;
    --dist-dir) 
      DIST_DIR="$(realpath $2)/dkumonitor-$DKUMONITOR_VERSION"
      shift
      ;;
    -v|--verbose)
      verbose=1
      ;;
     *) 
      ;;
  esac
  shift
done

# Prepare build env
echo "Start build of dkumonitor $DKUMONITOR_VERSION"
mkdir -p "$DIST_DIR/bin"
export GOPATH="${BUILD_DIR}/goenv"
mkdir -p "${GOPATH}"
cd $BUILD_DIR



# Check build requirements
if ! command -v go > /dev/null; then
  echo "ERROR: go required to build dkumonitor"
  exit 1
else
  goversion=$(go version | cut -d " " -f3)
  goversion=${goversion:2}
  if python -c "import sys; sys.exit(not (${goversion//./,}) < (1,11,0));"; then
    echo "ERROR: go>=1.11 required to build dkumonitor"
    exit 1
  fi
fi
if [ ! -f node_modules/yarn/bin/yarn ]; then
  if ! command -v npm > /dev/null; then
    echo "ERROR: npm is required to build dkumonitor"
    exit 1
  else
    echo "Installs yarn builder"
    npm install yarn
  fi
fi
if [ ! -f pyenv/bin/activate ]; then
  echo "Installs the required pyenv"
  mkdir pyenv
  virtualenv -p python2.7 pyenv
  source pyenv/bin/activate
  pip install pip --upgrade
  pip install setuptools --upgrade
else
  echo "Loads existing pyenv"
  source pyenv/bin/activate
fi

# Make the actual build

# Download python environement
mkdir -p "$DIST_DIR/lib/python"
pip_command="pip install"
if [[ 0 < "$verbose" ]]; then
  pip_command="pip install --verbose"
fi

$pip_command \
  --disable-pip-version-check \
  --no-cache-dir \
  --no-binary=:all: \
  --target="$DIST_DIR/lib/python" \
  --requirement "$SCRIPT_DIR/requirements.txt"
find "$DIST_DIR/lib/python" -name "*.pyc" -delete


if [[ 0 < "$do_build" ]]; then

echo "Download InfluxDB"
go get "${INFLUXDB_REPO}" || true
echo "Build InfluxDB"
cd "$GOPATH/src/$INFLUXDB_REPO"
git checkout "$INFLUXDB_VERSION"
env GO111MODULE=on go build -tags 'assets ' -o bin/darwin/influx ./cmd/influx
env GO111MODULE=on go build -tags 'assets ' -o bin/darwin/influxd ./cmd/influxd
cd - &>/dev/null

echo "Done"
exit 0

log "Download carbonapi"
exec_logged go get "${CARBONAPI_REPO}" || true
log "Build carbonapi"
cd "$GOPATH/src/$CARBONAPI_REPO"
exec_logged git checkout "$CARBONAPI_VERSION"
exec_logged make nocairo
cd - &>/dev/null

log "Download grafana"
exec_logged go get "${GRAFANA_REPO}" || true
cd $GOPATH/src/$GRAFANA_REPO
exec_logged git checkout "$GRAFANA_VERSION"
log "Build grafana backend"
exec_logged go run build.go setup
exec_logged go run build.go build 
log "Build grafana frontend"
exec_logged $BUILD_DIR/node_modules/yarn/bin/yarn install --pure-lockfile
exec_logged npm run build
cd - &>/dev/null

log "Download collectd"
exec_logged curl -O "https://storage.googleapis.com/collectd-tarballs/collectd-${COLLECTD_VERSION}.tar.bz2"
exec_logged tar xf "collectd-${COLLECTD_VERSION}.tar.bz2"
log "Build collectd"
exec_logged cd "collectd-${COLLECTD_VERSION}"
# Thit script does not enforce anything except for xfs support in the disk module
# because it needs explicit request. Any orther module will be built if the 
# dependencies are available. The official image is built with a good part of them
# We explicitely remove the udev dependency for the disk module
exec_logged ./configure \
    --with-libudev=/dev/null \
    --enable-xfs \
    --enable-static=no

exec_logged make -j8
cd - &>/dev/null

fi # End of if do_build


# Finished the build, now package
log "Prepare the package"
exec_logged rsync -avz "$SCRIPT_DIR/scripts/installer" "$DIST_DIR/installer"
exec_logged rsync -avz "$SCRIPT_DIR/bin/" "$DIST_DIR/bin/"
exec_logged rsync -avz "$SCRIPT_DIR/conf/" "$DIST_DIR/conf/"
exec_logged rsync -avz "$SCRIPT_DIR/templates/" "$DIST_DIR/templates/"
exec_logged rsync -avz "$SCRIPT_DIR/dashboards/" "$DIST_DIR/dashboards/"
exec_logged rsync -avz "$SCRIPT_DIR/licenses/" "$DIST_DIR/licenses/"
exec_logged rsync -avz "$SCRIPT_DIR/LICENSE" "$DIST_DIR/"
exec_logged rsync -avz "$SCRIPT_DIR/COPYRIGHT" "$DIST_DIR/"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$GO_CARBON_REPO/go-carbon" "$DIST_DIR/bin/go-carbon"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$CARBONAPI_REPO/carbonapi" "$DIST_DIR/bin/carbonapi"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$GRAFANA_REPO/bin/linux-amd64/grafana-server" "$DIST_DIR/bin/"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$GRAFANA_REPO/public/" "$DIST_DIR/static/"
mkdir -p "$DIST_DIR/lib/collectd"
exec_logged rsync -avz "$BUILD_DIR/collectd-${COLLECTD_VERSION}/collectd" "$DIST_DIR/bin/collectd"
exec_logged rsync -avz ${BUILD_DIR}/collectd-${COLLECTD_VERSION}/.libs/*.so "$DIST_DIR/lib/collectd/"
exec_logged rsync -avz ${BUILD_DIR}/collectd-${COLLECTD_VERSION}/src/types.db "$DIST_DIR/lib/collectd/"

# Tarball it
if [ 0 -lt "$do_archive" ]; then
  log "Creates the tarball"
  cd $(dirname ${DIST_DIR})
  exec_logged tar -cvzf "${DIST_DIR}.tar.gz" "$(basename ${DIST_DIR})/"
  exec_logged cd -
fi

log "Done"
