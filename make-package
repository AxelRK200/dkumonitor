#!/usr/bin/env bash

# Config
GO_CARBON_REPO="github.com/lomik/go-carbon"
GO_CARBON_VERSION="v0.12.0"
CARBONAPI_REPO="github.com/go-graphite/carbonapi"
CARBONAPI_VERSION="0.11.0"
GRAFANA_REPO="github.com/grafana/grafana"
GRAFANA_VERSION="v5.1.3"
COLLECTD_REPO="github.com/collectd/collectd"
COLLECTD_VERSION="5.8.0"

DKUMONITOR_VERSION="0.0.3"

SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
BUILD_DIR="${SCRIPT_DIR}/build"
DIST_DIR="${SCRIPT_DIR}/dist/dkumonitor-$DKUMONITOR_VERSION"

# Realpath fallback for oses without it (Mac)
command -v realpath >/dev/null 2>&1 || realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

do_build=1
do_archive=1
while [ $# -gt 0 ]
do
  case "$1" in
    --skip-build) 
      do_build=0
      ;;
    --skip-archive) 
      do_archive=0
      ;;
    --build-dir) 
      BUILD_DIR=$(realpath $2)
      shift
      ;;
    --dist-dir) 
      DIST_DIR="$(realpath $2)/dkumonitor-$DKUMONITOR_VERSION"
      shift
      ;;
     *) 
      ;;
  esac
  shift
done

log() {
  current_time=$(date "+%Y-%m-%d %H:%M:%S")
  printf "[+] %s - %s\n" "$current_time" "$@"
}
error_report() {
  cat "$BUILD_DIR/build.log"
  log "Execution failed, see log displayed above, stored in $BUILD_DIR/build.log"
  exit 1
}
trap 'error_report $LINENO' ERR

# Prepare build env

log "Start build of dkumonitor $DKUMONITOR_VERSION"
mkdir -p "$DIST_DIR/bin"
export GOPATH="${BUILD_DIR}/goenv"
mkdir -p "${GOPATH}"
cd $BUILD_DIR

exec_logged() {
  echo "+" "$@" >> "$BUILD_DIR/build.log"
  "$@" 2>> "$BUILD_DIR/build.log" >> "$BUILD_DIR/build.log" # '&>>' syntax fails on MacOS
}

# Check build requirements
if ! command -v go > /dev/null; then
  log "ERROR: go required to build dkumonitor"
  exit 1
else
  goversion=$(go version | cut -d " " -f3)
  goversion=${goversion:2}
  if python -c "import sys; sys.exit(not (${goversion//./,}) < (1,9,0));"; then
    log "ERROR: go>=1.9 required to build dkumonitor"
    exit 1
  fi
fi
if [ ! -f node_modules/yarn/bin/yarn ]; then
  if ! command -v npm > /dev/null; then
    log "ERROR: npm is required to build dkumonitor"
    exit 1
  else
    log "installs yarn builder"
    exec_logged npm install yarn
  fi
fi
if [ ! -f pyenv/bin/activate ]; then
  log "installs the required pyenv"
  mkdir pyenv
  exec_logged virtualenv -p python2.7 pyenv
  source pyenv/bin/activate
  exec_logged pip install pip --upgrade
  exec_logged pip install setuptools --upgrade
else
  log "loads existing pyenv"
  source pyenv/bin/activate
fi

# Make the actual build

# Download python environement
mkdir -p "$DIST_DIR/lib/python"
exec_logged pip install \
  --verbose \
  --disable-pip-version-check \
  --no-cache-dir \
  --no-binary=:all: \
  --target="$DIST_DIR/lib/python" \
  --requirement "$SCRIPT_DIR/requirements.txt"
exec_logged find "$DIST_DIR/lib/python" -name "*.pyc" -delete

if [[ 0 < "$do_build" ]]; then

log "Download go-carbon"
exec_logged go get "${GO_CARBON_REPO}"
log "Build go-carbon"
cd "$GOPATH/src/$GO_CARBON_REPO"
exec_logged git checkout "$GO_CARBON_VERSION"
exec_logged git checkout . # Discard previous patch
echo "+ patch -p1 <${SCRIPT_DIR}/dkumonitor-gocarbon.patch" >> "$BUILD_DIR/build.log"
patch -p1 <"${SCRIPT_DIR}/dkumonitor-gocarbon.patch" 2>> "$BUILD_DIR/build.log" >> "$BUILD_DIR/build.log"
exec_logged make
cd - &>/dev/null

log "Download carbonapi"
exec_logged go get "${CARBONAPI_REPO}"
log "Build carbonapi"
cd "$GOPATH/src/$CARBONAPI_REPO"
exec_logged git checkout "$CARBONAPI_VERSION"
exec_logged make nocairo
cd - &>/dev/null

log "Download grafana"
exec_logged go get "${GRAFANA_REPO}" || true
cd $GOPATH/src/$GRAFANA_REPO
exec_logged git checkout "$GRAFANA_VERSION"
log "Build grafana backend"
exec_logged go run build.go setup
exec_logged go run build.go build 
log "Build grafana frontend"
exec_logged $BUILD_DIR/node_modules/yarn/bin/yarn install --pure-lockfile
exec_logged npm run build
cd - &>/dev/null

log "Download collectd"
exec_logged curl -O "https://storage.googleapis.com/collectd-tarballs/collectd-${COLLECTD_VERSION}.tar.bz2"
exec_logged tar xf "collectd-${COLLECTD_VERSION}.tar.bz2"
log "Build collectd"
exec_logged cd "collectd-${COLLECTD_VERSION}"
# Thit script does not enforce anything except for xfs support in the disk module
# because it needs explicit request. Any orther module will be built if the 
# dependencies are available. The official image is built with a good part of them
exec_logged ./configure \
    --enable-all-plugins=no \
    #--enable-aggregation \
    #--enable-amqp    \
    #--enable-apache  \
    #--enable-apcups  \
    #--enable-apple_sensors \
    #--enable-aquaero \
    #--enable-ascent  \
    #--enable-barometer \
    #--enable-battery \
    #--enable-bind  \
    #--enable-ceph  \
    #--enable-cgroups \
    #--enable-chrony \
    #--enable-conntrack \
    #--enable-contextswitch \
    #--enable-cpu \
    #--enable-cpufreq \
    #--ensable-cpusleep  \
    #--enable-csv \
    #--enable-curl  \
    #--enable-curl_json \
    #--enable-curl_xml  \
    #--enable-dbi \
    #--enable-df  \
    #--enable-disk  \
    #--enable-dns \
    #--enable-dpdkevents \
    #--enable-dpdkstat  \
    #--enable-drbd  \
    #--enable-email \
    #--enable-entropy \
    #--enable-ethstat \
    #--enable-exec  \
    #--enable-fhcount \
    #--enable-filecount \
    #--enable-fscache \
    #--enable-gmond \
    #--enable-gps \
    #--enable-grpc  \
    #--enable-hddtemp \
    #--enable-hugepages \
    #--enable-intel_pmu \
    #--enable-intel_rdt \
    #--enable-interface \
    #--enable-ipc \
    #--enable-ipmi  \
    #--enable-iptables  \
    #--enable-ipvs  \
    #--enable-irq \
    #--enable-java  \
    #--enable-load  \
    #--enable-logfile \
    #--enable-log_logstash  \
    #--enable-lpar  \
    #--enable-lua \
    #--enable-lvm \
    #--enable-madwifi \
    #--enable-match_empty_counter \
    #--enable-match_hashed  \
    #--enable-match_regex \
    #--enable-match_timediff  \
    #--enable-match_value \
    #--enable-mbmon \
    #--enable-mcelog  \
    #--enable-md  \
    #--enable-memcachec \
    #--enable-memcached \
    #--enable-memory  \
    #--enable-mic \
    #--enable-modbus  \
    #--enable-mqtt  \
    #--enable-multimeter  \
    #--enable-mysql \
    #--enable-netapp  \
    #--enable-netlink \
    #--enable-network \
    #--enable-nfs \
    #--enable-nginx \
    #--enable-notify_desktop  \
    #--enable-notify_email  \
    #--enable-notify_nagios \
    #--enable-ntpd  \
    #--enable-numa  \
    #--enable-nut \
    #--enable-olsrd \
    #--enable-onewire \
    #--enable-openldap  \
    #--enable-openvpn \
    #--enable-oracle  \
    #--enable-ovs_events  \
    #--enable-ovs_stats \
    #--enable-perl  \
    #--enable-pf  \
    #--enable-pinba \
    #--enable-ping  \
    #--enable-postgresql  \
    #--enable-powerdns  \
    #--enable-processes \
    #--enable-protocols \
    #--enable-python  \
    #--enable-redis \
    #--enable-routeros  \
    #--enable-rrdcached \
    #--enable-rrdtool \
    #--enable-sensors \
    #--enable-serial  \
    #--enable-sigrok  \
    #--enable-smart \
    #--enable-snmp  \
    #--enable-snmp_agent  \
    #--enable-statsd  \
    #--enable-swap  \
    #--enable-synproxy  \
    #--enable-syslog  \
    #--enable-table \
    #--enable-tail_csv  \
    #--enable-tail  \
    #--enable-tape  \
    #--enable-target_notification \
    #--enable-target_replace  \
    #--enable-target_scale  \
    #--enable-target_set  \
    #--enable-target_v5upgrade  \
    #--enable-tcpconns  \
    #--enable-teamspeak2  \
    #--enable-ted \
    #--enable-thermal \
    #--enable-threshold \
    #--enable-tokyotyrant \
    #--enable-turbostat \
    #--enable-unixsock  \
    #--enable-uptime  \
    #--enable-users \
    #--enable-uuid  \
    #--enable-varnish \
    #--enable-virt  \
    #--enable-vmem  \
    #--enable-vserver \
    #--enable-wireless  \
    #--enable-write_graphite  \
    #--enable-write_http  \
    #--enable-write_kafka \
    #--enable-write_log \
    #--enable-write_mongodb \
    #--enable-write_prometheus \
    #--enable-write_redis \
    #--enable-write_riemann \
    #--enable-write_sensu \
    #--enable-write_tsdb  \
    #--enable-xencpu  \
    #--enable-xmms  \
    #--enable-zfs_arc \
    #--enable-zone  \
    #--enable-zookeeper \
    --enable-xfs \
    --enable-static=no


exec_logged make -j8
cd - &>/dev/null

fi # End of if do_build


# Finished the build, now package
log "Prepare the package"
exec_logged rsync -avz "$SCRIPT_DIR/scripts/installer" "$DIST_DIR/installer"
exec_logged rsync -avz "$SCRIPT_DIR/bin/" "$DIST_DIR/bin/"
exec_logged rsync -avz "$SCRIPT_DIR/conf/" "$DIST_DIR/conf/"
exec_logged rsync -avz "$SCRIPT_DIR/templates/" "$DIST_DIR/templates/"
exec_logged rsync -avz "$SCRIPT_DIR/dashboards/" "$DIST_DIR/dashboards/"
exec_logged rsync -avz "$SCRIPT_DIR/licenses/" "$DIST_DIR/licenses/"
exec_logged rsync -avz "$SCRIPT_DIR/LICENSE.txt" "$DIST_DIR/"
exec_logged rsync -avz "$SCRIPT_DIR/COPYRIGHT.txt" "$DIST_DIR/"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$GO_CARBON_REPO/go-carbon" "$DIST_DIR/bin/go-carbon"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$CARBONAPI_REPO/carbonapi" "$DIST_DIR/bin/carbonapi"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$GRAFANA_REPO/bin/grafana-server" "$DIST_DIR/bin/"
exec_logged rsync -avz "$BUILD_DIR/goenv/src/$GRAFANA_REPO/public/" "$DIST_DIR/static/"
mkdir -p "$DIST_DIR/lib/collectd"
exec_logged rsync -avz "$BUILD_DIR/collectd-${COLLECTD_VERSION}/collectd" "$DIST_DIR/bin/collectd"
exec_logged rsync -avz ${BUILD_DIR}/collectd-${COLLECTD_VERSION}/.libs/*.so "$DIST_DIR/lib/collectd/"
exec_logged rsync -avz ${BUILD_DIR}/collectd-${COLLECTD_VERSION}/src/types.db "$DIST_DIR/lib/collectd/"

# Tarball it
if [ 0 -lt "$do_archive" ]; then
  log "Creates the tarball"
  cd $(dirname ${DIST_DIR})
  exec_logged tar -cvzf "${DIST_DIR}.tar.gz" "$(basename ${DIST_DIR})/"
  exec_logged cd -
fi

log "Done"
